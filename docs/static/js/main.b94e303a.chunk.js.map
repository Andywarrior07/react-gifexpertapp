{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","target","value","type","placeholder","onChange","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","response","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","c","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAgBhD,OACE,8BACE,sBAAMC,SAXW,SAAAC,GACnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAG/BR,GAAc,SAAAS,GAAU,OAAKJ,EAAEK,OAAO,GAAGC,OAAjB,mBAA2BF,OACnDN,EAAc,MAKZ,SACE,uBACES,KAAK,OACLC,YAAY,gBACZF,MAAOT,EACPY,SApBkB,SAAAT,GACxBF,EAAcE,EAAEK,OAAOC,e,QCJdI,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACvC,OACE,sBAAKC,UAAU,6CAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCNGK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfN,EADe,iDACiCO,UACpDF,GAFmB,+DAIEG,MAAMR,GAJR,cAIfS,EAJe,gBAKEA,EAASC,OALX,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAG,MAAK,CAC5BhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAKc,EAAIC,OAAOC,iBAAiBhB,QAVd,kBAYdY,GAZc,4CAAH,sDCIPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECDb,SAAAA,GAAa,IAAD,EACZtB,mBAAS,CACjCgC,OAAQ,GACRG,SAAS,IAH2B,mBAC/BC,EAD+B,KACxBC,EADwB,KAYtC,OANAC,qBAAU,WACRjB,EAAQC,GAAUiB,MAAK,SAAAP,GACrBK,EAAS,CAAEL,SAAQG,SAAS,SAE7B,CAACb,IAEGc,EDVqBI,CAAalB,GAAjCU,EAD+B,EAC/BA,OAAQG,EADuB,EACvBA,QAEhB,OACE,gCACE,oBAAIjB,UAAU,mCAAd,SAAkDI,IAEjDa,GACC,mBAAGjB,UAAU,mCAAb,wBAGF,qBAAKA,UAAU,YAAf,SACGc,EAAOF,KAAI,SAAAC,GAAG,OACb,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,aEbnB0B,EAAe,WAAO,IAAD,EACIzC,mBAAS,CAAC,gBADd,mBACzBQ,EADyB,KACbT,EADa,KAGhC,OACE,gCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACGS,EAAWsB,KAAI,SAAAY,GAAC,OACf,cAAC,EAAD,CAAiBpB,SAAUoB,GAAbA,Y,MCTxBC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.b94e303a.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (inputValue.trim().length < 2) {\n      return;\n    }\n    setCategories(categories => [e.target[0].value, ...categories]);\n    setInputValue('');\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type='text'\n          placeholder='Buscar un gif'\n          value={inputValue}\n          onChange={handleInputChange}\n        />\n      </form>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const GifGridItem = ({ id, title, url }) => {\n  return (\n    <div className='card animate__animated animate__fadeInLeft'>\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","export const getGifs = async category => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=B4z4CvhLto7tuqEyi9m70jnvR2qC8H2a`;\n  const response = await fetch(url);\n  const { data } = await response.json();\n\n  const gifs = data.map(img => ({\n    id: img.id,\n    title: img.title,\n    url: img.images.downsized_medium.url,\n  }));\n  return gifs;\n};\n","import React from 'react';\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ({ category }) => {\n  const { images, loading } = useFetchGifs(category);\n\n  return (\n    <div>\n      <h3 className='animate__animated animate__flash'>{category}</h3>\n\n      {loading && (\n        <p className='animate__animated animate__flash'>Loading...</p>\n      )}\n\n      <div className='card-grid'>\n        {images.map(img => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </div>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = category => {\n  const [state, setState] = useState({\n    images: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then(images => {\n      setState({ images, loading: false });\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState(['Dragon Ball']);\n\n  return (\n    <div>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map(c => (\n          <GifGrid key={c} category={c} />\n        ))}\n      </ol>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}